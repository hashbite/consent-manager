"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6906],{5021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(2322),r=t(5392);const o={title:"Next.js"},s="Integrating Consent Manager with Next.js",i={id:"frameworks/nextjs",title:"Next.js",description:"Integrating Consent Manager into a Next.js application involves configuring the manager and wrapping your application with it. We will also handle route changes for analytics tracking within the ConsentManagerWrapper.",source:"@site/docs/frameworks/nextjs.md",sourceDirName:"frameworks",slug:"/frameworks/nextjs",permalink:"/consent-manager/docs/frameworks/nextjs",draft:!1,unlisted:!1,editUrl:"https://github.com/hashbite/consent-manager/edit/master/packages/docs/docs/frameworks/nextjs.md",tags:[],version:"current",frontMatter:{title:"Next.js"},sidebar:"someSidebar",previous:{title:"Gatsby",permalink:"/consent-manager/docs/frameworks/gatsby"},next:{title:"Parcel",permalink:"/consent-manager/docs/frameworks/parcel"}},c={},p=[{value:"Example",id:"example",level:2},{value:"Installation",id:"installation",level:2},{value:"Setting Up the Consent Manager",id:"setting-up-the-consent-manager",level:2},{value:"Step 1: Create and Configure <code>ConsentManagerWrapper</code>",id:"step-1-create-and-configure-consentmanagerwrapper",level:3},{value:"Step 2: Wrap Your Next.js Application",id:"step-2-wrap-your-nextjs-application",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"integrating-consent-manager-with-nextjs",children:"Integrating Consent Manager with Next.js"}),"\n",(0,a.jsxs)(n.p,{children:["Integrating Consent Manager into a Next.js application involves configuring the manager and wrapping your application with it. We will also handle route changes for analytics tracking within the ",(0,a.jsx)(n.code,{children:"ConsentManagerWrapper"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["A tested implementation is available in our ",(0,a.jsx)(n.a,{href:"https://github.com/hashbite/consent-manager-examples/tree/main/nextjs",children:"example repository"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"First, install the necessary packages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @consent-manager/core @consent-manager/interface-default use-persisted-state\n"})}),"\n",(0,a.jsx)(n.h2,{id:"setting-up-the-consent-manager",children:"Setting Up the Consent Manager"}),"\n",(0,a.jsxs)(n.h3,{id:"step-1-create-and-configure-consentmanagerwrapper",children:["Step 1: Create and Configure ",(0,a.jsx)(n.code,{children:"ConsentManagerWrapper"})]}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"consent-manager.js"})," file in your project. This file will configure ",(0,a.jsx)(n.code,{children:"ConsentManagerWrapper"}),", including handling route changes for analytics tracking:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { ConsentManagerDefaultInterface } from '@consent-manager/interface-default';\nimport '@consent-manager/interface-default/dist/default.min.css';\nimport createPersistedState from 'use-persisted-state';\nimport { getMatomoTracker } from '@consent-manager/integration-matomo';\n\nconst useConsentStateStore = createPersistedState('consent-manager');\n\nconst config = {\n  // ... your configuration options ...\n};\n\nexport const ConsentManagerWrapper = ({ children }) => {\n  const storage = useConsentStateStore();\n  const router = useRouter();\n  const { trackPageViewSPA } = getMatomoTracker();\n  const [prevLocation, setPrevLocation] = useState(\n    typeof window !== 'undefined' ? window.location : undefined\n  );\n\n  useEffect(() => {\n    const handleRouteChange = (url: string) => {\n      const { location } = window;\n      trackPageViewSPA({ location, prevLocation });\n      setPrevLocation(location);\n    };\n    router.events.on('routeChangeComplete', handleRouteChange);\n\n    return () => {\n      router.events.off('routeChangeComplete', handleRouteChange);\n    };\n  }, [prevLocation, router.events, trackPageViewSPA]);\n\n  return (\n    <ConsentManagerDefaultInterface store={storage} config={config}>\n      {children}\n    </ConsentManagerDefaultInterface>\n  );\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In this setup, the ",(0,a.jsx)(n.code,{children:"ConsentManagerWrapper"})," takes care of the route change tracking in addition to managing user consents."]}),"\n",(0,a.jsx)(n.h3,{id:"step-2-wrap-your-nextjs-application",children:"Step 2: Wrap Your Next.js Application"}),"\n",(0,a.jsxs)(n.p,{children:["In your Next.js ",(0,a.jsx)(n.code,{children:"_app.js"})," file, import and use ",(0,a.jsx)(n.code,{children:"ConsentManagerWrapper"})," to wrap your application:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport { ConsentManagerWrapper } from '../components/consent-manager';\nimport type { AppProps } from 'next/app';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ConsentManagerWrapper>\n      <Component {...pageProps} />\n    </ConsentManagerWrapper>\n  );\n}\n\nexport default MyApp;\n"})}),"\n",(0,a.jsx)(n.p,{children:"This integration ensures that Consent Manager wraps around the entire Next.js application and manages consent decisions and tracking throughout the app."})]})}function g(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);