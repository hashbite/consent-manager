"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7654],{351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(2322),a=t(5392);const r={title:"Alternative Storage Libraries"},i="Using Alternative Storage Libraries for Consent Manager",o={id:"guides/alternative-storage-libraries",title:"Alternative Storage Libraries",description:"You are not limited to using use-persistent-state for managing user consent decisions in Consent Manager. Although use-persistent-state is a convenient choice for semi-permanently storing user consent decisions in the browser's local storage, other storage solutions or even React's native state management can be employed.",source:"@site/docs/guides/alternative-storage-libraries.md",sourceDirName:"guides",slug:"/guides/alternative-storage-libraries",permalink:"/consent-manager/docs/guides/alternative-storage-libraries",draft:!1,unlisted:!1,editUrl:"https://github.com/hashbite/consent-manager/edit/master/packages/docs/docs/guides/alternative-storage-libraries.md",tags:[],version:"current",frontMatter:{title:"Alternative Storage Libraries"},sidebar:"someSidebar",previous:{title:"Custom User Interfaces",permalink:"/consent-manager/docs/guides/create-custom-interface"},next:{title:"Vite",permalink:"/consent-manager/docs/frameworks/vite"}},c={},l=[{value:"Using React&#39;s useState",id:"using-reacts-usestate",level:2},{value:"Implementation Example",id:"implementation-example",level:3}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"using-alternative-storage-libraries-for-consent-manager",children:"Using Alternative Storage Libraries for Consent Manager"}),"\n",(0,s.jsxs)(n.p,{children:["You are not limited to using ",(0,s.jsx)(n.code,{children:"use-persistent-state"})," for managing user consent decisions in Consent Manager. Although ",(0,s.jsx)(n.code,{children:"use-persistent-state"})," is a convenient choice for semi-permanently storing user consent decisions in the browser's local storage, other storage solutions or even React's native state management can be employed."]}),"\n",(0,s.jsx)(n.h2,{id:"using-reacts-usestate",children:"Using React's useState"}),"\n",(0,s.jsxs)(n.p,{children:["You can utilize React's ",(0,s.jsx)(n.code,{children:"useState"})," hook for storing consent decisions. This approach provides a more transient storage solution, as the state is maintained only for the duration of the user's session."]}),"\n",(0,s.jsx)(n.h3,{id:"implementation-example",children:"Implementation Example"}),"\n",(0,s.jsxs)(n.p,{children:["Here's how you can set up Consent Manager using React's ",(0,s.jsx)(n.code,{children:"useState"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport { ConsentManager } from '@consent-manager/core';\n\n// Define your Consent Manager configuration\nconst config = {\n  // ... your configuration options ...\n};\n\nexport const ConsentManagerWrapper = ({ children }) => {\n  // Use React's useState for storing consent decisions\n  const storage = React.useState({\n    decisions: {},\n  });\n\n  return (\n    <ConsentManager store={storage} config={config}>\n      {children}\n    </ConsentManager>\n  );\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);