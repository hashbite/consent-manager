"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[191],{6078:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=i(2322),o=i(5392);const r={title:"Custom (Tracking) Integration"},a="Creating a Custom (Tracking) Integration for Consent Manager",s={id:"guides/create-custom-integration",title:"Custom (Tracking) Integration",description:"This guide will help you create a custom integration for Consent Manager. We\u2019ll use a generalized approach, providing you with the framework to integrate any third-party service.",source:"@site/docs/guides/create-custom-integration.md",sourceDirName:"guides",slug:"/guides/create-custom-integration",permalink:"/consent-manager/docs/guides/create-custom-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/hashbite/consent-manager/edit/master/packages/docs/docs/guides/create-custom-integration.md",tags:[],version:"current",frontMatter:{title:"Custom (Tracking) Integration"},sidebar:"someSidebar",previous:{title:"Client-Side Routing in SPAs",permalink:"/consent-manager/docs/guides/client-side-routing"},next:{title:"Custom User Interface",permalink:"/consent-manager/docs/guides/create-custom-interface"}},c={},l=[{value:"Step 1: Define the Integration Configuration",id:"step-1-define-the-integration-configuration",level:2},{value:"Step 2: Initialize Service Scripts On User Consent",id:"step-2-initialize-service-scripts-on-user-consent",level:2},{value:"Step 3: Add to Consent Manager Configuration",id:"step-3-add-to-consent-manager-configuration",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function g(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"creating-a-custom-tracking-integration-for-consent-manager",children:"Creating a Custom (Tracking) Integration for Consent Manager"}),"\n",(0,t.jsx)(e.p,{children:"This guide will help you create a custom integration for Consent Manager. We\u2019ll use a generalized approach, providing you with the framework to integrate any third-party service."}),"\n",(0,t.jsx)(e.h2,{id:"step-1-define-the-integration-configuration",children:"Step 1: Define the Integration Configuration"}),"\n",(0,t.jsxs)(e.p,{children:["Create an ",(0,t.jsx)(e.code,{children:"IntegrationConfig"})," object for your integration. This includes metadata like ID, title, category, colors, icon, privacy policy URL, and description. You can find suitable icons for your service at ",(0,t.jsx)(e.a,{href:"https://simpleicons.org/",children:"Simple Icons"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import {\n  createIconComponentFromSimpleIconsSvgPath,\n  getForegroundColor,\n  IntegrationConfig\n} from '@consent-manager/core';\n\nimport { siYourService } from 'simple-icons'; // Replace with your service's icon\n\nexport function yourServiceIntegration(options: { apiKey: string }): IntegrationConfig {\n  const { title, hex, path } = siYourService;\n  const color = `#${hex}`;\n  const contrastColor = getForegroundColor(color);\n  const Icon = createIconComponentFromSimpleIconsSvgPath(title, path);\n  const lang = typeof window !== 'undefined' ? window.navigator.language : 'en-US';\n\n  return {\n    id: 'your-service',\n    title,\n    category: 'Your Category',\n    color,\n    contrastColor,\n    Icon,\n    privacyPolicyUrl: `https://your-service-privacy-policy.com?hl=${lang}`,\n    description: 'Description of your service.',\n    WrapperComponent,\n    options: { apiKey: options.apiKey }, // Pass custom options here\n  };\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"step-2-initialize-service-scripts-on-user-consent",children:"Step 2: Initialize Service Scripts On User Consent"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"WrapperComponent"})," is used to initialize the service and its code based on user consent."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Note:"})," That despite its name, it does not actually wrap your application - this is a legacy term from an earlier version of Consent Manager and may be renamed in the future."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import React from 'react';\nimport {\n  createIconComponentFromSimpleIconsSvgPath,\n  getForegroundColor,\n  IntegrationConfig,\n  useDecision,\n  useIntegration\n} from '@consent-manager/core';\nimport {  } from '@consent-manager/core';\n\nlet wasInitialized = false;\n\nconst WrapperComponent: React.FC = () => {\n  const [isEnabled] = useDecision('your-service');\n  const yourServiceConfig = useIntegration('your-service');\n\n  if (!yourServiceConfig || !yourServiceConfig.options) {\n    throw new Error('Initialization requires configuration.');\n  }\n\n  // Avoid double initialization\n  if (!wasInitialized && isEnabled) {\n    // Initialize your service here using yourServiceConfig.options\n    wasInitialized = true;\n  }\n\n  return null;\n};\n\nexport function yourServiceIntegration(options: { apiKey: string }): IntegrationConfig {\n  // ...\n\n  return {\n    // ...\n    WrapperComponent,\n  };\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"step-3-add-to-consent-manager-configuration",children:"Step 3: Add to Consent Manager Configuration"}),"\n",(0,t.jsx)(e.p,{children:"Incorporate your custom integration into the Consent Manager configuration of your application. Here's an example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { ConsentManager } from '@consent-manager/core';\nimport { yourServiceIntegration } from './your-service-integration';\n\nconst App = () => {\n  const config = {\n    integrations: [\n      yourServiceIntegration({ apiKey: 'your-api-key' }) // Pass custom options here\n    ],\n  };\n\n  return (\n    <ConsentManager config={config}>\n      {/* Your application components */}\n    </ConsentManager>\n  );\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Ensure thorough testing, particularly in respecting user consent choices."}),"\n",(0,t.jsx)(e.li,{children:"Be mindful of performance, especially when loading external scripts or services."}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This guide gives you a flexible framework to integrate any third-party service with Consent Manager, ensuring your application is compliant and respectful of user consent."})]})}function u(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(g,{...n})}):g(n)}}}]);