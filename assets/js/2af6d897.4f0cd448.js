"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4462],{7996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=t(2322),i=t(5392);const r={title:"TypeScript"},a="TypeScript Integration Guide for Consent Manager",o={id:"guides/typescript",title:"TypeScript",description:"Introduction",source:"@site/docs/guides/typescript.md",sourceDirName:"guides",slug:"/guides/typescript",permalink:"/consent-manager/docs/guides/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/hashbite/consent-manager/edit/master/packages/docs/docs/guides/typescript.md",tags:[],version:"current",frontMatter:{title:"TypeScript"},sidebar:"someSidebar",previous:{title:"Translation and i18n Support",permalink:"/consent-manager/docs/guides/i18n"},next:{title:"Client-Side Routing in SPAs",permalink:"/consent-manager/docs/guides/client-side-routing"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Install types for use-persisted-state",id:"install-types-for-use-persisted-state",level:2},{value:"Basic Configuration Example",id:"basic-configuration-example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"typescript-integration-guide-for-consent-manager",children:"TypeScript Integration Guide for Consent Manager"}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"This guide offers a straightforward approach to integrating Consent Manager with TypeScript, enhancing development with type safety and streamlined code management."}),"\n",(0,s.jsx)(n.h2,{id:"install-types-for-use-persisted-state",children:"Install types for use-persisted-state"}),"\n",(0,s.jsxs)(n.p,{children:["To effectively manage user consent decisions, we recommend using the ",(0,s.jsx)(n.code,{children:"use-persisted-state"})," package. This ensures that user preferences are stored persistently. Install its types with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i --dev @types/use-persisted-state\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-configuration-example",children:"Basic Configuration Example"}),"\n",(0,s.jsx)(n.p,{children:"In a TypeScript project, configuring Consent Manager involves setting up the config object and user consent state store with type definitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  ConsentManager,\n  ConsentManagerConfig,\n  ConsentManagerStorageState,\n} from '@consent-manager/core'\nimport createPersistedState from 'use-persisted-state'\n\nconst useConsentStateStore = createPersistedState<ConsentManagerStorageState>(\n  'consent-manager-typescript-example'\n)\n\nconst config: ConsentManagerConfig = {\n  integrations: [\n    // Define your integrations here\n  ],\n  onChangeDecision: (last, next) => {\n    const changedDecisions = {}\n    for (const key in next) {\n      if (last[key] !== next[key]) {\n        changedDecisions[key] = next[key]\n      }\n    }\n    console.log('New user decisions:', changedDecisions)\n  },\n}\n\nconst App: React.FC = () => {\n  const storage = useConsentStateStore()\n\n  return (\n    <ConsentManager config={config} store={storage}>\n      {/* Your application components */}\n    </ConsentManager>\n  )\n}\n\nexport default App\n"})}),"\n",(0,s.jsx)(n.p,{children:"This configuration ensures that both your Consent Manager settings and user consent state are handled with TypeScript's type safety features."})]})}function g(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);